<<<<<<< HEAD
[静态代理]
·BX
    1.Proxy：用于生成动态代理示例
    2.InvocationHandler：调用处理程序并返回结果
·一些定义
      ●横切关注点:跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部
      横切关注点:跨越应用程序多个模块的方法或功能.即是，与我们业务逻辑无关的，但是我们需要关注的部
      分，就是横切关注点。如日志，安全,缓存,事务等等...
      分，就是横切关注点.如日志，安全，缓存，事务等等.
      ●切面(ASPECT) :横切关注点被模块化的特殊对象。即，它是一 个类。
      ●切面(ASPECT) :横切关注点被模块化的特殊对象。即，它是一 个类。
      ●通知(Advice) :切面必须要完成的工作。即，它是类中的-一个方法。
      通知(建议)：切面必须要完成的工作。即，它是类中的-一个方法.
      ●目标(Target) :被通知对象。
      目标(目标)：被通知对象。
      ●代理(Proxy) :向目标对象应用通知之后创建的对象。
      代理(代理)：向目标对象应用通知之后创建的对象。
      ●切入点(PointCut) :切面通知执行的“地点"的定义。
      切入点(PointCut)：切面通知执行的“地点”的定义.
      ●连接点(JointPoint) :与切入点匹配的执行点。
      连接点(连接点)：与切入点匹配的执行点。
=======
[静态代理]
·BX
    1.Proxy：用于生成动态代理示例
    2.InvocationHandler：调用处理程序并返回结果
·一些定义
      ●横切关注点:跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部
      横切关注点:跨越应用程序多个模块的方法或功能.即是，与我们业务逻辑无关的，但是我们需要关注的部
      分，就是横切关注点。如日志，安全,缓存,事务等等...
      分，就是横切关注点.如日志，安全，缓存，事务等等.
      ●切面(ASPECT) :横切关注点被模块化的特殊对象。即，它是一 个类。
      ●切面(ASPECT) :横切关注点被模块化的特殊对象。即，它是一 个类。
      ●通知(Advice) :切面必须要完成的工作。即，它是类中的-一个方法。
      通知(建议)：切面必须要完成的工作。即，它是类中的-一个方法.
      ●目标(Target) :被通知对象。
      目标(目标)：被通知对象。
      ●代理(Proxy) :向目标对象应用通知之后创建的对象。
      代理(代理)：向目标对象应用通知之后创建的对象。
      ●切入点(PointCut) :切面通知执行的“地点"的定义。
      切入点(PointCut)：切面通知执行的“地点”的定义.
      ●连接点(JointPoint) :与切入点匹配的执行点。
      连接点(连接点)：与切入点匹配的执行点。
>>>>>>> 1da3f48 (first commit)
